
This project extends the MIT xv6 operating system by adding performance monitoring and process timing functionalities.  
Below are the modifications made.

1. Process structure enhancement
(proc.h)
We have added the timing fields to track the CPU usage metrics for each process. These fields store the process start time, accumulated CPU time, and last scheduling timestamp. 

2. Process Initialization
(proc.c in the allocproc() function)
The timing fields are initialized when a new process is created. The start time is set to the current system ticks, and the CPU usage counter is initialized to zero.

 
3. CPU Time Accumulation
(trap.c in the timer interrupt handler)
The CPU time counter for the currently running process is incremented on each timer interrupt. This provides CPU usage tracking.


4. System Call Interface Definition
(syscall.h)
The unique system call numbers for the new performance monitoring functions were defined. 
 


5. System Call Registration
(syscall.c) 
The new system calls were registered in the kernel’s system call dispatch table, allowing the kernel to route user-space calls to the appropriate handler functions. 


6. System Call Implementation
(proc.c)
The new system call handlers were added.
int sys_procinfo(void): Provides detailed information about all running processes, including PID, name, state, CPU time, and memory usage. 
 int sys_systime(void): Allows querying of CPU time usage for specific processes, enabling the time command to measure execution duration.




7. Kernel Function Declarations
(defs.h)
The new system call functions were declared for the kernel’s internal use. This ensures proper function linkage.


8. User Space Interface
(user.h)
This provides user-space function declarations that the applications can use to access the new system calls through the standard library interface.

9. User-space system call stubs
(usys.S)
This generates assembly stubs that handle the transition from the user space to kernel space for the new system calls, following xv6’s system call convention.

10. Performance Monitor Application
(perfmon.c)
This is the user application that displays the comprehensive system performance information including the system uptime, process list(along with detailed statistics), CPU usage per process, memory consumption and process states. It provides real-time system monitoring capabilities similar to Unix ‘top’ or ‘ps’ commands.


11. Time application:
(time.c)
This is the user application that measures the execution time of other programs, providing execution time, CPU time consumed, and CPU utilization percentage. It enables performance profiling of user applications, which is similar to the Unix ‘time’ command.



12. Build system integration
(Makefile)
The new applications were integrated into the xv6 build system, ensuring that they are compiled and included in the filesystem image.
